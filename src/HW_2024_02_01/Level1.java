package HW_2024_02_01;

import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;

public class Level1 {
    public static void main(String[] args) {
        //Хеш-функции имеют широкое применение в реальной жизни, включая:
        // Хеш-таблицы:
        // Одно из основных применений хеш-функций – в реализации структур данных, таких как хеш-таблицы.

        // Они обеспечивают эффективный поиск, вставку и удаление данных.
        //
        // Безопасность и хеширование паролей
        // Хеш-функции применяются для хеширования паролей пользователей.
        // Они конвертируют введенный пользователем пароль в фиксированную строку (хеш), что обеспечивает безопасность,
        // так как оригинальный пароль не хранится в явном виде.

        // Цифровая подпись и хеширование данных
        // В криптографии хеш-функции используются для создания цифровых подписей и хеширования сообщений.
        // Это обеспечивает целостность данных и проверку подлинности.Кэширование данных
        //
        // Хеш-функции используются в кэшах для быстрого поиска ранее вычисленных результатов.
        // Например, кэширование веб-страниц для ускорения загрузки.Генерация уникальных идентификаторов (хеш-кодов)
        //
        // Хеш-функции могут применяться для генерации уникальных идентификаторов для объектов, файлов или данных.
        //
        // Поиск дубликатов в базе данных
        // Хеш-функции используются для быстрого поиска дубликатов записей в базе данных, ускоряя процесс поиска.
        //
        // Хеширование данных в блокчейне:
        // В технологии блокчейн хеш-функции играют ключевую роль при создании уникальных идентификаторов для блоков и транзакций.
        //
        // Распределение нагрузки (Consistent Hashing):
        // В распределенных системах хеш-функции применяются для равномерного распределения нагрузки между узлами.

        // Таким образом, хеш-функции являются фундаментальным инструментом в информатике и криптографии,
        // применяемым в различных областях для решения разнообразных задач.

        try {
            // Создаем генератор ключей RSA
            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA"); // имя из Java Security Standard Algorithm Names Specification

            // Устанавливаем размер ключа (в битах)
            keyPairGenerator.initialize(2048); //Этот размер является стандартом для большинства применений.
            // Он обеспечивает достаточный уровень безопасности и производительности для большинства сценариев.

            // Генерируем пару ключей
            KeyPair keyPair = keyPairGenerator.generateKeyPair();

            // Получаем открытый и закрытый ключи
            java.security.PrivateKey privateKey = keyPair.getPrivate();
            java.security.PublicKey publicKey = keyPair.getPublic();

            // Выводим ключи в консоль (в реальном приложении лучше хранить ключи в безопасном месте)
            System.out.println("Приватный ключ: " + privateKey);
            System.out.println("Открытый ключ: " + publicKey);

        } catch (NoSuchAlgorithmException e) {
            System.out.println("Алгоритм с данным имеенем не найден");
        }
    }
}
